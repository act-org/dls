"use strict";(self.webpackChunk_actinc_dls=self.webpackChunk_actinc_dls||[]).push([[1014],{"./src/components/BarChart/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomizeBarColorByKey:()=>CustomizeBarColorByKey,Default:()=>Default,LongLabel:()=>LongLabel,LongSubLabel:()=>LongSubLabel,UngroupedBarChart:()=>UngroupedBarChart,VerticalBarChart:()=>VerticalBarChart,WithBarPropsOnclick:()=>WithBarPropsOnclick,WithCartesianGridProps:()=>WithCartesianGridProps,WithCustomBarColors:()=>WithCustomBarColors,WithCustomLabel:()=>WithCustomLabel,WithCustomTooltip:()=>WithCustomTooltip,WithCustomizedAxisTickProps:()=>WithCustomizedAxisTickProps,WithDynamicHeightFunctionAndWidth:()=>WithDynamicHeightFunctionAndWidth,WithFixedHeightAndWidth:()=>WithFixedHeightAndWidth,WithFourLines:()=>WithFourLines,WithOneGroupedBars:()=>WithOneGroupedBars,WithScatter:()=>WithScatter,WithThinBarSize:()=>WithThinBarSize,WithXAxisProps:()=>WithXAxisProps,WithYAxisProps:()=>WithYAxisProps,WithoutScroll:()=>WithoutScroll,WithoutTooltip:()=>WithoutTooltip,WithyAxisLabelTypographyProps:()=>WithyAxisLabelTypographyProps,__namedExportsOrder:()=>__namedExportsOrder,default:()=>index_stories});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),Typography=__webpack_require__("./node_modules/@mui/material/esm/Typography/Typography.js"),Scatter=__webpack_require__("./node_modules/recharts/es6/cartesian/Scatter.js"),playground=__webpack_require__("./src/helpers/playground.ts");const defaultData=[{2019:138598,"2019scatter":6e4,2020:130127,"2020scatter":3e4,2021:9250,"2021scatter":4e4,name:"California"},{2019:57500,"2019scatter":4150,2020:56500,"2020scatter":5600,2021:58e3,"2021scatter":8e3,name:"Nevada"},{2019:44800,"2019scatter":7410,2020:43800,"2020scatter":3250,2021:45e3,"2021scatter":4e3,name:"New York"},{2019:13e3,"2019scatter":900,2020:15e3,"2020scatter":800,2021:14e3,"2021scatter":1900,name:"Texas"},{2019:12e3,"2019scatter":1600,2020:15500,"2020scatter":2e3,2021:15e3,"2021scatter":750,name:"Washington"},{2019:0,"2019scatter":1200,2020:9800,"2020scatter":1450,2021:12500,"2021scatter":1600,name:"Oregon"}],defaultDataFourLines=defaultData.map((d=>({...d,2022:7e3,"2022scatter":3500}))),defaultBarKeys=["2019","2020","2021"],defaultBarKeysFourLines=[...defaultBarKeys,"2022"];try{defaultData.displayName="defaultData",defaultData.__docgenInfo={description:"Copyright (c) ACT, Inc. and its affiliates.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.",displayName:"defaultData",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/BarChart/mocks.tsx#defaultData"]={docgenInfo:defaultData.__docgenInfo,name:"defaultData",path:"src/components/BarChart/mocks.tsx#defaultData"})}catch(__react_docgen_typescript_loader_error){}var BarChart=__webpack_require__("./src/components/BarChart/index.tsx");const index_stories={args:{barKeys:defaultBarKeys,data:defaultData,description:"A bar chart displaying the volumes per US state in 2019, 2020, and 2021",title:"Volumes for US States"},argTypes:(0,playground.Q)({barKeys:{},barProps:{},cartesianGridProps:{},chartProps:{},children:{},colors:{},data:{},height:{},labelListProps:{},maxHeight:{},responsiveContainerProps:{},subLabelProps:{},tooltipProps:{},width:{},xAxisProps:{},yAxisProps:{}},BarChart.Es),component:BarChart.Es,tags:["autodocs"],title:"Molecules / Charts / BarChart"},Default={},WithCustomBarColors={args:{barKeys:defaultBarKeys,colors:["red","green","blue"],data:defaultData}},CustomizeBarColorByKey={args:{barKeys:defaultBarKeys,customizeBarFillColor:(_,barKey)=>"2020"===barKey?"red":void 0,data:defaultData}},WithOneGroupedBars={args:{barKeys:defaultBarKeys,data:[{2019:200,2020:223,2021:225,name:"White/Caucasian"}]}},WithFourLines={args:{barKeys:defaultBarKeysFourLines,data:defaultDataFourLines}},WithoutTooltip={args:{barKeys:defaultBarKeys,data:defaultData,tooltipProps:{cursor:!1,wrapperStyle:{visibility:"hidden"}}}},WithCustomTooltip={args:{barKeys:defaultBarKeys,data:defaultData,tooltipProps:{content:({active,payload,label})=>active&&payload&&payload.length?(0,jsx_runtime.jsxs)("div",{style:{backgroundColor:"#FFF"},children:[(0,jsx_runtime.jsx)(Typography.A,{variant:"body1",children:`${label} : ${payload[0].value}`}),(0,jsx_runtime.jsx)(Typography.A,{variant:"body2",children:"Anything you want can be displayed here."})]}):null}}},UngroupedBarChart={args:{barKeys:["2019"],data:defaultData}},VerticalBarChart={args:{barKeys:defaultBarKeys,chartProps:{layout:"horizontal",margin:{left:0}},data:defaultData,labelListProps:{position:"top"},maxHeight:"auto",subLabelProps:{position:"bottom"},xAxisProps:{axisLine:!0,dataKey:"name",dy:10,orientation:"bottom",style:{fill:"#003359",fontSize:"14px",fontWeight:500},tickLine:!1,type:"category"},yAxisProps:{dataKey:void 0,dx:0,padding:{bottom:0,top:0},style:{fill:"#555",fontSize:"10px"},tick:void 0,type:"number"}}},WithThinBarSize={args:{barKeys:defaultBarKeys,chartProps:{barSize:10},data:defaultData}},WithBarPropsOnclick={args:{barKeys:defaultBarKeys,barProps:{onClick:e=>console.log(e)},data:defaultData},name:"With Bar Props: onClick"},WithScatter={args:{barKeys:defaultBarKeys,children:(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Scatter.X,{dataKey:"2019scatter",fill:"red",shape:({fill,height,width,x,cy})=>(0,jsx_runtime.jsx)("g",{children:(0,jsx_runtime.jsx)("circle",{cx:x+width/2,cy:Math.floor(cy-height/2-2*height),fill,r:height})})}),(0,jsx_runtime.jsx)(Scatter.X,{dataKey:"2020scatter",fill:"red",shape:({fill,height,width,x,y})=>(0,jsx_runtime.jsx)("g",{children:(0,jsx_runtime.jsx)("circle",{cx:x+width/2,cy:y+height/2,fill,r:height})})}),(0,jsx_runtime.jsx)(Scatter.X,{dataKey:"2021scatter",fill:"red",shape:({fill,height,width,x,cy})=>(0,jsx_runtime.jsx)("g",{children:(0,jsx_runtime.jsx)("circle",{cx:x+width/2,cy:cy+height/2+2*height,fill,r:height})})})]}),data:defaultData,tooltipProps:{renderAdditionalInfo:(barId,payload)=>{const scatterInfo=payload.find((el=>el.dataKey===`${barId}scatter`));return scatterInfo?(0,jsx_runtime.jsxs)("div",{children:["Scatter: ",scatterInfo.value]}):null}}}},WithCartesianGridProps={args:{barKeys:defaultBarKeys,cartesianGridProps:{horizontal:!1,stroke:"#000"},data:defaultData}},WithoutScroll={args:{barKeys:defaultBarKeys,data:defaultData,maxHeight:1e3}},WithDynamicHeightFunctionAndWidth={args:{barKeys:defaultBarKeys,data:defaultData,height:initialHeight=>initialHeight+250,width:600}},WithFixedHeightAndWidth={args:{barKeys:defaultBarKeys,data:defaultData,height:350,width:600}},WithXAxisProps={args:{barKeys:defaultBarKeys,data:defaultData,xAxisProps:{axisLine:!0,orientation:"bottom",tickLine:!0}}},WithYAxisProps={args:{barKeys:defaultBarKeys,data:defaultData,yAxisProps:{axisLine:!1,dx:0,orientation:"right",tick:void 0,tickLine:!1}}},WithyAxisLabelTypographyProps={args:{barKeys:defaultBarKeys,data:defaultData,yAxisLabelTypographyProps:{sx:{color:"error.main"}}}},WithCustomLabel={args:{barKeys:defaultBarKeys,data:defaultData,subLabels:["2019 test","2020 test","2021 test"]}},LongLabel={args:{barKeys:defaultBarKeys,data:[{2019:900,2020:823,2021:925,name:" Los Angeles - California, United States"},{2019:575,2020:565,2021:580,name:"Carson City - Nevada, United States"},{2019:448,2020:438,2021:450,name:"New York - New York, United States"}]}},LongSubLabel={args:{barKeys:["2019 with long sublabel","2020 with long sublabel","2021 with long sublabel"],data:[{"2019 with long sublabel":900,"2020 with long sublabel":823,"2021 with long sublabel":925,name:" California"},{"2019 with long sublabel":575,"2020 with long sublabel":565,"2021 with long sublabel":580,name:" Nevada"},{"2019 with long sublabel":448,"2020 with long sublabel":438,"2021 with long sublabel":450,name:"New York"}]}},WithCustomizedAxisTickProps={args:{barKeys:defaultBarKeys,customizedAxisTickProps:{textWidth:110},data:defaultData,subLabelWidth:50}},__namedExportsOrder=["Default","WithCustomBarColors","CustomizeBarColorByKey","WithOneGroupedBars","WithFourLines","WithoutTooltip","WithCustomTooltip","UngroupedBarChart","VerticalBarChart","WithThinBarSize","WithBarPropsOnclick","WithScatter","WithCartesianGridProps","WithoutScroll","WithDynamicHeightFunctionAndWidth","WithFixedHeightAndWidth","WithXAxisProps","WithYAxisProps","WithyAxisLabelTypographyProps","WithCustomLabel","LongLabel","LongSubLabel","WithCustomizedAxisTickProps"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{}",...Default.parameters?.docs?.source}}},WithCustomBarColors.parameters={...WithCustomBarColors.parameters,docs:{...WithCustomBarColors.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    colors: ['red', 'green', 'blue'],\n    data: defaultData\n  }\n}",...WithCustomBarColors.parameters?.docs?.source}}},CustomizeBarColorByKey.parameters={...CustomizeBarColorByKey.parameters,docs:{...CustomizeBarColorByKey.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    customizeBarFillColor: (_, barKey) => barKey === '2020' ? 'red' : undefined,\n    data: defaultData\n  }\n}",...CustomizeBarColorByKey.parameters?.docs?.source}}},WithOneGroupedBars.parameters={...WithOneGroupedBars.parameters,docs:{...WithOneGroupedBars.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    data: [{\n      '2019': 200,\n      '2020': 223,\n      '2021': 225,\n      name: 'White/Caucasian'\n    }]\n  }\n}",...WithOneGroupedBars.parameters?.docs?.source}}},WithFourLines.parameters={...WithFourLines.parameters,docs:{...WithFourLines.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeysFourLines,\n    data: defaultDataFourLines\n  }\n}",...WithFourLines.parameters?.docs?.source}}},WithoutTooltip.parameters={...WithoutTooltip.parameters,docs:{...WithoutTooltip.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    data: defaultData,\n    tooltipProps: {\n      cursor: false,\n      wrapperStyle: {\n        visibility: 'hidden'\n      }\n    }\n  }\n}",...WithoutTooltip.parameters?.docs?.source}}},WithCustomTooltip.parameters={...WithCustomTooltip.parameters,docs:{...WithCustomTooltip.parameters?.docs,source:{originalSource:'{\n  args: {\n    barKeys: defaultBarKeys,\n    data: defaultData,\n    tooltipProps: {\n      content: ({\n        active,\n        payload,\n        label\n      }) => {\n        if (active && payload && payload.length) {\n          return <div style={{\n            backgroundColor: \'#FFF\'\n          }}>\n              <Typography variant="body1">{`${label} : ${payload[0].value}`}</Typography>\n              <Typography variant="body2">\n                Anything you want can be displayed here.\n              </Typography>\n            </div>;\n        }\n        return null;\n      }\n    }\n  }\n}',...WithCustomTooltip.parameters?.docs?.source}}},UngroupedBarChart.parameters={...UngroupedBarChart.parameters,docs:{...UngroupedBarChart.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: ['2019'],\n    data: defaultData\n  }\n}",...UngroupedBarChart.parameters?.docs?.source}}},VerticalBarChart.parameters={...VerticalBarChart.parameters,docs:{...VerticalBarChart.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    chartProps: {\n      layout: 'horizontal',\n      margin: {\n        left: 0\n      }\n    },\n    data: defaultData,\n    labelListProps: {\n      position: 'top'\n    },\n    maxHeight: 'auto',\n    subLabelProps: {\n      position: 'bottom'\n    },\n    xAxisProps: {\n      axisLine: true,\n      dataKey: 'name',\n      dy: 10,\n      orientation: 'bottom',\n      style: {\n        fill: '#003359',\n        fontSize: '14px',\n        fontWeight: 500\n      },\n      tickLine: false,\n      type: 'category'\n    },\n    yAxisProps: {\n      dataKey: undefined,\n      dx: 0,\n      padding: {\n        bottom: 0,\n        top: 0\n      },\n      style: {\n        fill: '#555',\n        fontSize: '10px'\n      },\n      tick: undefined,\n      type: 'number'\n    }\n  }\n}",...VerticalBarChart.parameters?.docs?.source}}},WithThinBarSize.parameters={...WithThinBarSize.parameters,docs:{...WithThinBarSize.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    chartProps: {\n      barSize: 10\n    },\n    data: defaultData\n  }\n}",...WithThinBarSize.parameters?.docs?.source}}},WithBarPropsOnclick.parameters={...WithBarPropsOnclick.parameters,docs:{...WithBarPropsOnclick.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    barProps: {\n      onClick: e => console.log(e)\n    },\n    data: defaultData\n  },\n  name: 'With Bar Props: onClick'\n}",...WithBarPropsOnclick.parameters?.docs?.source}}},WithScatter.parameters={...WithScatter.parameters,docs:{...WithScatter.parameters?.docs,source:{originalSource:'{\n  args: {\n    barKeys: defaultBarKeys,\n    children: <>\n        <Scatter dataKey="2019scatter" fill="red" shape={(({\n        fill,\n        height,\n        width,\n        x,\n        cy\n      }: {\n        fill: string;\n        height: number;\n        width: number;\n        x: number;\n        cy: number;\n      }) => <g>\n                <circle cx={x + width / 2} cy={Math.floor(cy - height / 2 - height * 2)} fill={fill} r={height} />\n              </g>) as ScatterCustomizedShape} />\n        <Scatter dataKey="2020scatter" fill="red" shape={(({\n        fill,\n        height,\n        width,\n        x,\n        y\n      }: {\n        fill: string;\n        height: number;\n        width: number;\n        x: number;\n        y: number;\n      }) => <g>\n                <circle cx={x + width / 2} cy={y + height / 2} fill={fill} r={height} />\n              </g>) as ScatterCustomizedShape} />\n        <Scatter dataKey="2021scatter" fill="red" shape={(({\n        fill,\n        height,\n        width,\n        x,\n        cy\n      }: {\n        fill: string;\n        height: number;\n        width: number;\n        x: number;\n        cy: number;\n      }) => <g>\n                <circle cx={x + width / 2} cy={cy + height / 2 + height * 2} fill={fill} r={height} />\n              </g>) as ScatterCustomizedShape} />\n      </>,\n    data: defaultData,\n    tooltipProps: {\n      renderAdditionalInfo: (barId, payload) => {\n        const scatterInfo = payload.find(el => el.dataKey === `${barId}scatter`);\n        if (!scatterInfo) {\n          return null;\n        }\n        return <div>Scatter: {scatterInfo.value}</div>;\n      }\n    }\n  }\n}',...WithScatter.parameters?.docs?.source}}},WithCartesianGridProps.parameters={...WithCartesianGridProps.parameters,docs:{...WithCartesianGridProps.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    cartesianGridProps: {\n      horizontal: false,\n      stroke: '#000'\n    },\n    data: defaultData\n  }\n}",...WithCartesianGridProps.parameters?.docs?.source}}},WithoutScroll.parameters={...WithoutScroll.parameters,docs:{...WithoutScroll.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    data: defaultData,\n    maxHeight: 1000\n  }\n}",...WithoutScroll.parameters?.docs?.source}}},WithDynamicHeightFunctionAndWidth.parameters={...WithDynamicHeightFunctionAndWidth.parameters,docs:{...WithDynamicHeightFunctionAndWidth.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    data: defaultData,\n    height: initialHeight => initialHeight + 250,\n    width: 600\n  }\n}",...WithDynamicHeightFunctionAndWidth.parameters?.docs?.source}}},WithFixedHeightAndWidth.parameters={...WithFixedHeightAndWidth.parameters,docs:{...WithFixedHeightAndWidth.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    data: defaultData,\n    height: 350,\n    width: 600\n  }\n}",...WithFixedHeightAndWidth.parameters?.docs?.source}}},WithXAxisProps.parameters={...WithXAxisProps.parameters,docs:{...WithXAxisProps.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    data: defaultData,\n    xAxisProps: {\n      axisLine: true,\n      orientation: 'bottom',\n      tickLine: true\n    }\n  }\n}",...WithXAxisProps.parameters?.docs?.source}}},WithYAxisProps.parameters={...WithYAxisProps.parameters,docs:{...WithYAxisProps.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    data: defaultData,\n    yAxisProps: {\n      axisLine: false,\n      dx: 0,\n      orientation: 'right',\n      tick: undefined,\n      tickLine: false\n    }\n  }\n}",...WithYAxisProps.parameters?.docs?.source}}},WithyAxisLabelTypographyProps.parameters={...WithyAxisLabelTypographyProps.parameters,docs:{...WithyAxisLabelTypographyProps.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    data: defaultData,\n    yAxisLabelTypographyProps: {\n      sx: {\n        color: 'error.main'\n      }\n    }\n  }\n}",...WithyAxisLabelTypographyProps.parameters?.docs?.source}}},WithCustomLabel.parameters={...WithCustomLabel.parameters,docs:{...WithCustomLabel.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    data: defaultData,\n    subLabels: ['2019 test', '2020 test', '2021 test']\n  }\n}",...WithCustomLabel.parameters?.docs?.source}}},LongLabel.parameters={...LongLabel.parameters,docs:{...LongLabel.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    data: longLabelData\n  }\n}",...LongLabel.parameters?.docs?.source}}},LongSubLabel.parameters={...LongSubLabel.parameters,docs:{...LongSubLabel.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: longBarKeys,\n    data: longSubLabelData\n  }\n}",...LongSubLabel.parameters?.docs?.source}}},WithCustomizedAxisTickProps.parameters={...WithCustomizedAxisTickProps.parameters,docs:{...WithCustomizedAxisTickProps.parameters?.docs,source:{originalSource:"{\n  args: {\n    barKeys: defaultBarKeys,\n    customizedAxisTickProps: {\n      textWidth: 110\n    },\n    data: defaultData,\n    subLabelWidth: 50\n  }\n}",...WithCustomizedAxisTickProps.parameters?.docs?.source}}}}}]);